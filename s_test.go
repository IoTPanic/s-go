package s_test

import (
	"fmt"
	"testing"

	"github.com/IoTPanic/s-go"
)

var tstPyld = []byte{
	0x50, 0x00, 0x00, 0x90, 0x00, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99, 0x32, 0xcc, 0x99,
	0x32, 0xcc, 0x99, 0x32, 0xcc, 0xcc,
}

func TestCreateTransaction(t *testing.T) {
	c0 := s.Connection{0x1, 0x1, 30, 0, 1000, false}
	c1 := s.Connection{0x1, 0x1, 30, 0, 30, false}
	c2 := s.Connection{0x1, 0x1, 30, 0, 1000, true}
	fmt.Printf("Testing formatting a transaction one frag long\n\n")
	trans, err := s.CreateTransaction(tstPyld, &c0)
	if err != nil {
		t.Fatal(err)
	}
	fmt.Println(trans)
	if len(trans) != 1 {
		t.Fatal("Failed!")
	}

	fmt.Printf("\nOK frag is %d long\n\n", len(trans[0]))

	fmt.Printf("====================================================\n\nTesting formatting a transaction with multiple fragments\n\n")
	trans, err = s.CreateTransaction(tstPyld, &c1)
	if err != nil {
		t.Fatal(err)
	}
	fmt.Println(trans)
	fmt.Printf("\nGenerated %d fragments\n\n", len(trans))
	if len(trans) != 17 {
		t.Fatal("Failed!")
	}

	fmt.Printf("====================================================\n\nTesting compression\n\n")
	trans, err = s.CreateTransaction(tstPyld, &c2)
	if err != nil {
		t.Fatal(err)
	}
	fmt.Println(trans)

	fmt.Printf("\nOrig payload was %d long, and it was compressed to %d\n", len(tstPyld), len(trans[0]))

	fmt.Printf("A whole %F%s of the original payload!\n\n\n", float32(len(trans[0]))/float32(len(tstPyld)), "%")
}
